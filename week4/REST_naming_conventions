What is REST ?
REST is acronym for REpresentational State Transfer. 
It is architectural style for distributed hypermedia systems and was first presented by Roy Fielding in 2000 .

Guiding Principles of REST :---
---------------------------
> Client–server – By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.

> Stateless – Each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server. 
Session state is therefore kept entirely on the client.

> Cacheable – Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable.
If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.

> Uniform interface – By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. 
In order to obtain a uniform interface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations;
self-descriptive messages; and, hypermedia as the engine of application state.

> Layered system – The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot “see” beyond the immediate layer with which they are interacting.

> Code on demand (optional) – REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. 
This simplifies clients by reducing the number of features required to be pre-implement

RESOURCE :--
---------
The key abstraction of information in REST is a resource. Any information that can be named can be a resource:
a document or image, 
a temporal service, 
a collection of other resources,
a non-virtual object (e.g. a person), and so on. 
REST uses a resource identifier to identify the particular resource involved in an interaction between components.

The state of resource at any particular timestamp is known as resource representation.
A representation consists of data, metadata describing the data and hypermedia links which can help the clients in transition to next desired state.
The data format of a representation is known as a MEDIA TYPE.
The media type identifies a specification that defines how a representation is to be processed. 
A truly RESTful API looks like hypertext.

resource methods GET/PUT/POST/DELETE.....

REST and HTTP are not same !!
A lot of people prefer to compare HTTP with REST. REST and HTTP are not same.

NAMING CONVENTIONS:----
----------------------------------------
A resource can be a singleton or a collection. For example, “customers” is a collection resource and “customer” is a singleton resource (in a banking domain). 
  We can identify “customers” collection resource using the URI “/customers”. 
  We can identify a single “customer” resource using the URI “/customers/{customerId}”.

A resource may contain sub-collection resources also.
   For example, sub-collection resource “accounts” of a particular “customer” can be identified using the URN “/customers/{customerId}/accounts” (in a banking domain)
   Similarly, a singleton resource “account” inside the sub-collection resource “accounts” can be identified as follows: “/customers/{customerId}/accounts/{accountId}”.
   
   > Use nouns to represent resources
   > Use forward slash (/) to indicate a hierarchical relationships
   > Do not use trailing forward slash (/) in URIs
   > Use hyphens (-) to improve the readability of URIs
   > Do not use underscores ( _ )
   > Use lowercase letters in URIs
    lowercase letters should be consistently preferred in URI paths.
     RFC 3986 defines URIs as case-sensitive except for the scheme and host components.
     e.g.
    http://api.example.org/my-folder/my-doc  //1
   > Do not use file extenstions
   > Never use CRUD function names in URIs
       URIs should not be used to indicate that a CRUD function is performed. 
       URIs should be used to uniquely identify resources and not any action upon them. 
       HTTP request methods should be used to indicate which CRUD function is performed.
       
      HTTP GET http://api.example.com/device-management/managed-devices  //Get all devices
      HTTP POST http://api.example.com/device-management/managed-devices  //Create new Device
      HTTP GET http://api.example.com/device-management/managed-devices/{id}  //Get device for given Id
      HTTP PUT http://api.example.com/device-management/managed-devices/{id}  //Update device for given Id
      HTTP DELETE http://api.example.com/device-management/managed-devices/{id}  //Delete device for given Id
       
     > Use query component to filter URI collection
     > Use HTTP status code
       200,201,204,400,404,500,503 and so on.............
